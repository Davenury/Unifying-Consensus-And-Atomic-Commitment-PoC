resolver ${RESOLVER};

init_worker_by_lua_block {
    local resty_random = require('resty.random')
    -- use random byte (0..255 int) as a seed
    local seed = string.byte(resty_random.bytes(1))
    math.randomseed(seed)
}

map $TYPE $type {
    default   "";
    FIXED_DELAY "fixed";
    RANDOM_DELAY "random";
    PEERSET_BASED_RANDOM_DELAY "peerset_random";
    PEERSET_BASED_FIXED_DELAY "peerset_fixed";
}

server {
    listen 8080;

    limit_rate ${LIMIT};

    set $calculated_delay 0;

    # type = instant, fixed_delay, random_delay, peerset_based_random_delay, peerset_based_fixed_delay
    if ( $type = "fixed" ) {
        set $calculated_delay ${DELAY};
    }

    if ( $type = "random" ) {
        set_by_lua_block $random {
            return math.random(${START_DELAY}, ${END_DELAY})
        }
        set $calculated_delay $random;
    }


    if ( $type = "peerset_random" ) {
        set $result "R";
    }

    if ( $type = "peerset_fixed" ) {
        set $result "F";
    }

    if ( $arg_peerset = ${PEERSET_ID} ) {
        set $result "${result}M";
    }
    if ( $arg_peerset != ${PEERSET_ID} ) {
        set $result "${result}N";
    }

    if ( $result = RM ) {
        # random, my peerset
        set_by_lua_block $calculated_delay {
            return math.random(${MY_PEERSET_START_DELAY}, ${MY_PEERSET_END_DELAY})
        }
    }

    if ( $result = FM ) {
        # fixed, my peerset
        set $calculated_delay ${MY_PEERSET_DELAY};
    }

    if ( $result = RN ) {
        # random, not my peerset
        set_by_lua_block $calculated_delay {
            return math.random(${NOT_MY_PEERSET_START_DELAY}, ${NOT_MY_PEERSET_END_DELAY})
        }
    }

    if ( $result = FN ) {
        # fixed, not my peerset
        set $calculated_delay ${NOT_MY_PEERSET_DELAY};
    }

    location / {
        access_by_lua 'ngx.sleep(tonumber(ngx.var.calculated_delay))';
        proxy_pass ${UPSTREAM}/;
    }
}